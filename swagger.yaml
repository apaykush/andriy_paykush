swagger: "2.0"
info:
  description: "Сервіс для календаря подій. Користувач має можливість створювати подію, редагувати її, видаляти, долучати інших користувачів до події, переглядати перелік всіх створених подій, та подій до яких він долучений."
  version: "1.0.0"
  title: "Календар подій"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name : Aтdriy 
    email: "apaykush@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
#     name: "SmartBear Licence"
#     url: hrrp://license.foo.com
# servers:
#   - url: "https://dev.foo.com/v1"
#     description: Dev Server
    
#   - url: "https://prod.foo.com/v1"
#     description: Prod Server
    
host: "calendar.swagger.io"
basePath: "/v2"
tags:
- name: "events"
  description: "Мої події"
  externalDocs:
    description: "Дізнайся більше"
    url: "http://swagger.io"
- name: "event"
  description: "Подія"
- name: "user"
  description: "Можливості користувача"
  externalDocs:
    description: "Дізнайся більше"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /events:
    post:
      tags:
      - "event"
      description: "Додавання нової події в календар"
      operationId: "addEvent"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "query"
        type: string
        name: "body"
        description: "Подія, що має бути доданою."
        required: true
      responses:
        405:
          description: "Неправильний ввід даних"
      security:
      - calendar_auth:
        - "write:events"
        - "read:events"
    put:
      tags:
      - "event"
      summary: "Редагування події"
      description: ""
      operationId: "updateEvent"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Подія, що має бути доданою."
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        400:
          description: "Помилка ID"
        404:
          description: "Не знайдено подій"
        405:
          description: "Помилка валідації"
      security:
      - calendar_auth:
        - "write:events"
        - "read:events"
  /event/findByStatus:
    get:
      tags:
      - "event"
      summary: "Шукає події by status"
      description: "Декілька аргументів статусу можуть бути передані через кому"
      operationId: "findEventsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Статус фільтр"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Invalid status value"
      security:
      - calendar_auth:
        - "write:events"
        - "read:events"
  /event/deleteByStatus:
    delete:
      tags:
      - "event"
      summary: "Видаляє подію"
      description: "Подія може бути видалена за допомогою статусу "
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
 
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  calendar_auth:
    type: "oauth2"
    authorizationUrl: "http://calendar.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:events: "Редагування подій"
      read:events: "Зчитування подій"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Event:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "concert"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
